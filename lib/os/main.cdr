;; Import the builtin OS module
(use os-internal for *)
(use bits)

(defn- id [x] x)






(defn- convert-mode-char [c]
  (cond (= c "r") RDONLY
        (= c "w") WRONLY
        (= c "a") APPEND
        (= c "c") CREAT
        :default 0))


(defn- convert-open-mode [mode]
    (reduce (fn (x c) (bits.or x (convert-mode-char c)))
            (convert-mode-char (first mode)) (rest mode)))



(defn open [path & more]
  (let [mode (first more)
        cb (second more)
        bit-mode RDONLY]
    (when (= (type mode) Lambda)
      (def cb mode)
      (def mode "r"))
    (open-raw path (convert-open-mode mode) cb)))


(defn open-sync [path & more]
  (let [mode (or (first more) "r")
        c (chan)]
    (open path mode (fn (fd err)
                      (send {:fd fd, :err err} c)))
    (let [res (recv c)]
      (if (:err res)
        (throw (:err res))
        (:fd res)))))


(def read read-raw)

(defn read-sync [fd count]
  (let [c (chan)]
    (read fd count (fn (content err)
                     (send {:content content, :err err} c)))
    (let [res (recv c)]
      (if (:err res)
        (throw (:err res))
        (:content res)))))
