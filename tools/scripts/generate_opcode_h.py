# This script generates the opcode.h header file.

import sys
import tokenize

header = """
/* Auto-generated by tools/scripts/generate_opcode_h.py */
#pragma once
#ifndef __OPCODE_H
#define __OPCODE_H

/* Instruction opcodes for compiled code */
""".lstrip()

footer = """
#endif
"""


ops = []

class Opcode:
    def __init__(self, name, inst_type='no_arg'):
        self.name = name
        self.inst_type = inst_type

def new_op(name, inst_type='no_arg'):
    ops.append(Opcode(name.upper(), inst_type))


new_op('NOP')
new_op('NIL')
new_op('NILS', 'imm_int')
new_op('TRUE')
new_op('CONST', 'imm_int') # load the constant at the index
new_op('FLOAT', 'imm_float')
new_op('INT',   'imm_int')
new_op('LOAD_LOCAL', 'imm_int') # load a local from the start of the stack frame
new_op('SET_LOCAL', 'imm_int') # set a local from the start of the stack frame



def main(outfile):
    with open(outfile, 'w') as f:
        f.write(header)

        for i, op in enumerate(ops):
            f.write("#define OP_%-24s 0x%02x\n" % (op.name, i * 3))

        f.write("\n");

        f.write("/* Instruction opcode foreach macro for code generation */\n")
        f.write("#define CEDAR_FOREACH_OPCODE(V) \\\n")
        for i, op in enumerate(ops):
            f.write("  V(%s, OP_%s, %s)" % (op.name, op.name, op.inst_type))
            if i < len(ops)-1:
                f.write(" \\")
            f.write("\n")
        f.write(footer)


if __name__ == '__main__':
    main('include/cedar/vm/opcode.h')
