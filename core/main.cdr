;; MIT License
;;
;; Copyright (c) 2018 Nick Wanninger
;;
;; Permission is hereby granted, free of charge, to any person obtaining a copy
;; of this software and associated documentation files (the "Software"), to deal
;; in the Software without restriction, including without limitation the rights
;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;; copies of the Software, and to permit persons to whom the Software is
;; furnished to do so, subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included in
;; all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;; SOFTWARE.


;; first is a wrapper around calling
;; the .first method on a type
(def* first
  (fn (x) (. x (first))))

;; same for rest
(def* rest
  (fn (x) (. x (rest))))


(defmacro* defmacro
  (fn (name args & body)
    (list 'defmacro* name
          (list 'fn args
                (cons 'do body)))))


(def* t 't)

;; have true and false resolve to themselves.
;; there is only a reason for 'false' to exist
;; as there are only 2 'falsy' values
;; in cedar (nil and false) but 'true' is a nice
;; thing to have
(def* true 'true)
(def* false 'false)


;; define dumb logical operators. These will be replaced
;; by macros later on, but there are useful for passing
;; into functions
(def* not (fn (x) (if x nil t)))
(def* or (fn (x y) (if x x y)))
(def* and (fn (x y) (if x y x)))

(def* not= (fn not= (a b) (not (= a b))))

(def* len
  (fn (x)
    (. x (len))))



(def* nil? (fn (v) (= (type v) Nil)))
(def* list? (fn (v) (= (type v) List)))
(def* string? (fn (v) (= (type v) String)))
(def* dict? (fn (v) (= (type v) Dict)))
(def* vector? (fn (v) (= (type v) Vector)))
(def* number? (fn (v) (= (type v) Number)))
(def* symbol? (fn (v) (= (type v) Symbol)))
(def* keyword? (fn (v) (= (type v) Keyword)))



;; since eval is a special form, there needs to
;; be a function that calls it. It looks weird
;; but it makes sense if you think about it
(def* eval (fn (obj) (eval obj)))

;; define the identity function, just returns the arg
(def* identity (fn (x) x))

;; (def* read-string (fn (str) (Reader str)))

;; a sequence is defined as an object that has a first
;; and rest method
;; unfortunately, the catch macro isn't defined yet, so
;; we need to implement the exception handling with the
;; internal catch* function
(def* seq?
  (fn (v)
    (catch* (fn () (and (and (. v first) (. v rest)) true))
        (fn (e) false))))




(def* map-1
  (fn (f l)
    (if (not (nil? l))
      (cons (f (first l))
            (map-1 f (rest l))))))




(def* walk
  (fn (inner outer form)
     (if (list? form) (outer (map-1 inner form))
        (outer form))))

(def* postwalk
  (fn (f form)
      (walk (fn (x) (postwalk f x))
            f
            form)))

(def* prewalk
  (fn (f form)
    (walk (fn (x) (prewalk f x))
          identity
          (f form))))



;; fully macroexpand a single list.
;; NOTE: does not walk down the tree
(def* macroexpand
  (fn (form)
      (let* ((ex (macroexpand-1 form)))
        (if (= ex form)
          form
          (macroexpand ex)))))


(def* macroexpand-all
  (fn (form)
      (prewalk (fn (x) (if (seq? x) (macroexpand x) x)) form)))

;; add the '+' operator to the string class
;; this *could* be implemented in c++ but nah.
(. String (add-field '+ (fn (self other)
                          (str self other))))


(. Module (add-field 'str (fn (self) (str "<Module " self.*name* ">"))))
(. Module (add-field 'repr (fn (self) (str "<Module " self.*name* ">"))))

(defmacro catch (id expr body)
  (list 'catch* (list 'fn nil expr) (list 'fn (list id) body)))

(defmacro defn (name args & body)
  (list 'def* name
        (list 'fn name args (cons 'do body))))

(defn inc (n) (+ n 1))
(defn dec (n) (- n 1))




(defmacro when
  (c & body)
  (list 'if c (cons 'do body)))



(defmacro when-not
  (c & body)
  (list 'if c nil (cons 'do body)))


(def* symbol cedar/symbol)

(let* ((gensym-id 0))
  (defn gensyms (s)
      (do (def* gensym-id (inc gensym-id))
          (symbol (str s gensym-id))))
  (defn gensym () (gensyms "G__")))


(defmacro or (x y)
  (let* ((sym (gensyms "OR-")))
    (list 'let* (list (list sym x)) (list 'if sym sym y))))

(defmacro and (x y)
  (let* ((sym (gensyms "AND-")))
    (list 'let* (list (list sym x)) (list 'if sym y sym))))





(defn second (x) (first (rest x)))



(. Keyword (set-field 'apply
              (fn (self coll)
                (get coll self nil))))

(. Number (set-field 'apply
             (fn (self coll)
               (get coll self nil))))

;; redefine the def* special form to allow a more
;; complicated scheme-like function definition
;; ex: (def foo :bar) => defines foo to :bar
;;     (def (id x) x) => defines the id function
;; why have this *and* the defn macro? Why not.
(defmacro def (& args)
  (let* ((name (first args))
         (val  (rest args)))
    (if (list? name)
      (list 'def* (first name) (list 'fn (first name) (rest name) (cons 'do val)))
      (list 'def* name (first val)))))

(defmacro cond (& a)
  (let* ((c (first a))
         (e (second a))
         (r (rest (rest a))))
    (list 'if c e
        (when r (cons 'cond r)))))


(defmacro declare (& names)
  (cons 'do (map-1 \x (list 'def x nil)
                   names)))


(def (not x)
  (if x nil true))

(def (atom? n)
  (cond (nil? n)     true
        (number? n)  true
        (string? n)  true
        (symbol? n)  true
        (keyword? n) true
        :else nil))



(def car first)
(def cdr rest)
(def (caar x)   (car (car x)))
(def (cadr x)   (car (cdr x)))
(def (cdar x)   (cdr (car x)))
(def (cddr x) (cdr (cdr x)))




(def (put item coll)
  (. coll (put item)))
(def (pop coll)
  (. coll (pop)))
(def (peek coll)
  (. coll (peek)))


(def (every? pred coll)
  (cond (nil? coll) t
        (pred (first coll)) (recur pred (rest coll))
        :else false))

;; returns if some of the collection returns true
;; when applied to the predicate
(def (some? pred coll)
  (or (pred (first coll)) (some? pred (rest coll))))

(def (constantly x)
  (fn (& a) x))

;; TODO: add this to the stdlib
(def (contains? coll k)
  (cond (nil? coll) false
        (= (first coll) k) true
        :otherwise (recur (rest coll) k)))

;; TODO: add to stdlib
(def (contains-where? coll pred)
  (cond (nil? coll) nil
        (pred (first coll)) true
        :otherwise (recur (rest coll) pred)))

;; TODO: add all flavours to stdlib
(def (contains-number? coll)
  (contains-where? coll number?))



;; given a list of lists, turn their firsts into a vector and cons
;; it with the recursive call to zip-lists on their rests
(def (zip-lists ls)
  (let* ((c (map-1 first ls)))
    (cond (contains? c nil) nil
          :else (cons (map-1 first ls) (zip-lists (map-1 rest ls))))))

;; zip any number of lists together into a single list, the
;; nth of which contains the nth item in each list passed
(def (zip & lists)
  (zip-lists lists))


(def (zip-lists-nil ls)
  (let* ((c (map-1 first ls)))
    (cond (every? nil? c) nil
          :else (cons (map-1 first ls) (zip-lists-nil (map-1 rest ls))))))

(def (zip-nil & lists)
  (zip-lists-nil lists))


(def (map f & colls)
  (cond (nil? (rest colls)) (map-1 f (first colls))
        (map-1 f (zip-lists colls))))

(def (foldl f i xs)
  (if (nil? xs)
    i
    (recur f (f i (first xs)) (rest xs))))

(def (foldr f i xs)
  (if (nil? xs)
    i
    (f (first xs) (foldr f i (rest xs)))))


(def (reverse xs)
  (foldl (fn (a b) (cons b a)) () xs))


(def (filter pred coll)
  (foldr (fn (x r) (if (pred x) (cons x r) r))
         nil coll))

;;;;
(def (count* c xs)
  (if (nil? xs) c
    (recur (inc c) (rest xs))))

(def (count coll)
  (cond (vector? coll) (size coll)
        :else (count* 0 coll)))
;;;;


(defn inc (n) (+ n 1))
(defn dec (n) (- n 1))
(defmacro inc (n) (list '+ n 1))
(defmacro dec (n) (list '- n 1))


(def (even? x)
  (if (number? x)
    (= 0 (bit-and x 0x01))
    (throw "even? needs a number")))

(def (odd? x)
  (not (even? x)))

(def range-step
  (fn (a b step)
    (if (< a b) (cons a (range-step (+ a step) b step)))))

(def (range a b)
    (if (< a b) (cons a (range-step (+ 1 a) b 1))))



;; reduce the function f over xs starting at i
(def (reduce f i xs)
     (if (nil? xs)
         i
         (reduce f (f i (first xs)) (rest xs))))

(def (append-1 l1 l2)
  (if (nil? l1)
    l2
    (cons (first l1)
          (append-1 (rest l1) l2))))

(def (append & lists)
  (reduce append-1 (first lists) (rest lists)))


(def qq/transform-quasiquote-arg nil)
(def qq/transform nil)


(def (qq/transform form)
  (if (seq? form)
    (let* ((car (first form)))
        (cond (= car 'unquote)          (list 'list (cadr form))
              (= car 'unquote-splicing) (cadr form)
              :otherwise                (list 'list (qq/transform-quasiquote-arg form))))
    (list 'list (qq/transform-quasiquote-arg form))))


(def (qq/transform-compound compound)
  (if (atom? compound)
    (list (list 'quote compound))
    (cons (qq/transform (first compound)) (qq/transform-compound (rest compound)))))


(def (qq/transform-quasiquote-arg-list argument)
  (let* ((car (first argument)))
    (cond (= car 'unquote)          (cadr argument)
          (= car 'unquote-splicing) (throw "UNQUOTE-SPLICING UNIMPLEMENTED HERE")
          :else            (cons 'append (qq/transform-compound argument)))))


(def (qq/transform-quasiquote-arg argument)
  (cond (list? argument) (qq/transform-quasiquote-arg-list argument)
        :otherwise       (list 'quote argument)))



(def (qq/expand form)
    (cond (= form nil) nil
          (atom? form) form
          (= (first form) 'quasiquote) (qq/transform-quasiquote-arg (second form))
          :else (let* ((expanded (cons (qq/expand (first form)) (qq/expand (rest form)))))
                  (if (= (first expanded) 'quasiquote)
                    (qq/transform-quasiquote-arg (second expanded))
                    expanded))))


(defmacro quasiquote (form)
    (qq/transform-quasiquote-arg form))
;;;;;;;;;;;;;;;;;;;;;;;;;; QUASIQUOTE IS VALID NOW ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defmacro first (x)
  `(. ~x (first)))
(defmacro rest (x)
  `(. ~x (rest)))
(defmacro len (x)
  `(. ~x (len)))




(defmacro inc= (id)
  `(def ~id (inc ~id)))
(defmacro dec= (id)
  `(def ~id (dec ~id)))

(defmacro += (id n)
  `(def ~id (+ ~id ~n)))
(defmacro -= (id n)
  `(def ~id (- ~id ~n)))
(defmacro *= (id n)
  `(def ~id (* ~id ~n)))
(defmacro /= (id n)
  `(def ~id (/ ~id ~n)))


(def (interleave s1 s2)
  (when (and s1 s2)
    (cons (first s1)
          (cons (first s2) 
                (interleave (rest s1) (rest s2))))))
(def (drop n l)
  (cond (= n 0) l
        (nil? l) nil
        :else (drop (dec n) (rest l))))

(def (take n l)
  (cond (= n 0) nil
        (nil? l) nil
        :else (cons (first l) (take (dec n) (rest l)))))

(def (partition n coll)
  (if (= 0 (count coll)) nil
    (do
      (let* ((p (take n coll)))
        (cond (nil? p) nil
              (= n (count p)) (cons p (partition n (drop n coll)))
              :else (list p))))))


(def nilify (fn (& args) nil))


(defmacro locals (names & body)
  (do (if (not= (type names) Vector)
        (throw "'locals' macro requires a vector of names"))
      (cons (list 'fn (map identity names) (cons 'do body)) (map nilify names))))



(defn LETEXPAND (bindings & body))


(defmacro LET (bindings & body)
  (let* ((names (map first bindings))
         (vals (map second bindings)))
    `((fn ~names
            (do ~@(map (fn (x) (cons 'def x)) bindings)
               ((fn ~names (do ~@body)) ~@names))
           (map nilify names)))))

(defmacro let (defs & body)
  (do (when (odd? (len defs))
            (throw (str "Error in let syntax. bindings must be of even length: " defs "")))
      `(LET ~(partition 2 defs) ~@body)))






(defmacro go (& body)
  `(go* (fn nil (do ~@body))))




(def (import-opt-expand name opts)
  (when opts
    (let [opt (first opts)
          t (type (first opts))]
      (cons (cond (= Vector t) (cons 'do (map (fn (x) `(def ~x (. ~name ~x)))
                                           opt))
                  true 1)
            (import-opt-expand name (rest opts))))))

(defmacro import (name & opts)
  `(do (def ~name (require ~(str name)))
     ~@(import-opt-expand name opts)))


(defmacro while (test & body)
  `(let* ()
     (when ~test
       ~@body
       (recur))))


;; Threads the expr through the forms. Inserts x as the
;; second item in the first form, making a list of it if it is not a
;; list already. If there are more forms, inserts the first form as the
;; second item in second form, etc.

(def (->transform  x forms)
  (if forms
    (let (form (first forms))
      (let (threaded (if (seq? form)
                        `(~(first form) ~x ~@(rest form))
                        (list form x)))
          (->transform threaded (rest forms))))
    x))


(defmacro ->
  (x & forms)
  (->transform x forms))


(def (->>transform x forms)
  (if forms
    (let (form (first forms))
      (let (threaded (if (seq? form)
                        `(~(first form) ~@(rest form) ~x)
                        (list form x)))
          (->>transform threaded (rest forms))))
    x))


(defmacro ->>
  (x & forms)
  (->>transform x forms))




(defmacro getattr (obj attr)
  `(getattr* ~obj (quote ~attr)))

(defmacro setattr (obj attr value)
  `(setattr* ~obj (quote ~attr) ~value))







;; since setting dict entries with keys as idents is
;; so common, this macro automatically quotes the key
;; identifier so you dont have to think about it.
(defmacro setq (coll name val)
  `(set ~coll (quote ~name) ~val))

;; define a macro for use inside classes to clean up
;; the (set self 'name val) form. Cause it's ugly.
(defmacro sets (name val)
  `(setattr self ~name ~val))

(defmacro gets (name & r)
  (if (nil? r) `(. self ~name)
    `(catch ~(gensym) (. self  ~name) ~@r)))



(def (deftype-expr-expand name exprs)
  (let (res nil)
      (while (not (nil? exprs))
        (let (curr (macroexpand (first exprs)))
          (cond
            ;; list expressions inside a class must be defs for fields
            (list? curr) (cond (= 'def* (first curr)) (def res (cons `(. ~name (set-field (quote ~(second curr)) ~(first (rest (rest curr)))))
                                                                   res))
                               :else (throw (String "invalid list-style expression in class definition: " curr)))

            ;; vectors in a class definition adds superclasses
            (vector? curr) (def res (cons `(do ~@(map (fn (c) `(. ~name (add-parent ~c)))
                                                      curr))
                                         res)))
          (def exprs (rest exprs))))
     ;; return the expanded result
     res))

;; declare a new type: `(def NewType (Type "NewType"))
;; set a field:        `(. NewType (set-field 'attr value)
;; add a parent:       `(. NewType (add-parent ParentType))`
(defmacro deftype (name & args)
      `(do (def ~name (Type ~(String name)))
           ~@(deftype-expr-expand name args)))

(def (extends? ta tb)
  (or (= ta tb) (contains? (. tb (get-parents)) ta)))


(def (instance? ta val)
  (extends? ta (type val)))

;; the stream class is a basic io class
;; it offers .write and .read
(deftype Stream
  (def write nil)
  (def read nil))


(deftype FileDescriptor [Stream]
  (def fd nil)
  ;; constructor that
  (def (new self fd_arg)
    (sets fd fd_arg))
  (def (write self s)
    (os-write (. self fd) s))
  (def (read self n)
    (os-read (.self self.fd) n))
  (def (close self)
    (do (os-close (. self fd))
        (sets fd nil))))

(def (fopen-flags path flags)
  (let (fd (os-open path flags))
    (cond (= fd -1)  (throw (str "unable to open file '" path "'"))
          :otherwise (FileDescriptor fd))))

(def (fopen path)
  (fopen-flags path (bit-or O_RDWR O_APPEND O_CREAT)))





(def (eval-file-in-module path m)
  (let [src (read-file path)
        exprs (map identity (read-string src))]
    (println exprs)
    (map eval exprs)))




(defmacro do-global (& globs)
  (let [old-mod-name (gensym)
        return-sym (gensym)]
    `(let* ((~old-mod-name (internal/get-module))
            (~return-sym nil))
       (internal/set-module nil)
       (def ~return-sym (do ~@globs))
       (internal/set-module ~old-mod-name)
       ~return-sym)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Base Exceptions

(deftype Exception
  ;; the exception's message defaults to an empty string
  ;; to be filled in later
  (def what "")
  (def (new self m)
    (sets what m))
  (def (str self)
    (str (. self __class__ (name)) ": " self.what))
  (def (repr self)
    (str (. self __class__ (name)) ": " self.what)))


(deftype AssertionError [Exception])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;





(defmacro assert (stmt)
  `(if ~stmt true (throw (AssertionError (str "Assertion " `~stmt " failed")))))

(def (join l s)
  (reduce (fn (a b) (str a s b)) (str (first l)) (rest l)))


(def (format s & vs)
  (apply str (map (fn (x) (apply str x)) (zip-nil (re-match #"[^\{\}]+" s) vs))))




(deftype lazy-seq
  ;; the function that will be called eventually
  (def func nil)
  ;; if the lazy sequence has been evaluated yet
  (def evaluated nil)
  ;; the value stored in the list. will be filled
  ;; when .seq is called
  (def value nil)
  ;; constructor. Takes the function that will be
  ;; evaluated on .seq
  (def (new self f)
    (setattr self func f))
  ;; implementations of first and rest
  (def (first self) (first (. self (seq))))
  (def (rest self) (rest (. self (seq))))
  ;; the seq function "steps" this lazy sequence.
  ;; this means it checks if it's been evaluated
  ;; yet, and if it needs to, evaluates the function
  ;; caching it's result and returning it. If it
  ;; has already been evaluated, there is no reason
  ;; in calling the function again and it returns
  ;; the value it had cached
  (def (seq self)
    (if (. self evaluated) (. self value)
      (do (setattr self evaluated t)
          (. self value := (self.func))
          (. self func := nil)
          self.value)))
  ;; convert the lazy list into a string.
  ;; WARNING: this will consume the *entire*
  ;; list
  (def (str self)
    (str "(" (join self " ") ")"))

  (def (write-stream self stream)
    (. stream (write "("))
    (let [curr self]
      (while curr
        (. stream (write (first curr)))
        (def curr (rest curr))
        (if curr (. stream (write " ")))))
    (. stream (write ")"))))

(defmacro lazily (& expr)
  `(lazy-seq (fn () (do ~@expr))))




(def *in*  (FileDescriptor 0))
(def *out* (FileDescriptor 1))
(def *err* (FileDescriptor 2))


(. Object (set-field 'write-stream (fn (self stream)
                                     (. stream (write (str self))))))


(. Number (set-field 'first (fn (self) self)))
(. Number (set-field 'rest (fn (self) (inc self))))


(def (up-to n))

(def (write stream & things)
  (. stream (write (apply str things))))


(def (sprint v)
  (. v (write-stream *out*)))

;; redefine print and println in terms of
;; *out* the stream class system
(def (print & things)
  (when-not (nil? things)
    (. *out* (write (join things " ")))))

(def (println & things)
  (+ (apply print things)
     (print "\n")))


(def (print-error & things)
  (do (. *err* (write (join things " ")))
      (. *err* (write "\n"))))




;; compose two functions into a single function
;; (f (g args...))
(def (comp f g)
  (fn (& xs) (f (apply g xs))))

;; takes a fn f and returns a function that
;; returns the logical not of f
(def (complement f)
  (fn (& args)
    (not (apply f args))))



(deftype MultiMethod
  ;; constructor for the MultiMethod map wrapper
  (def (new self)
    ;; by default, the :default method is simply id
    ;; TODO: decide if this is a bad idea or not
    (do (. self methods := {:default (fn (& x) (throw "multimethod unable to find key"))})))
  ;; add a method handler
  (def (set-method self key method)
    (do (set (. self methods) key method)))
  (def (get-method self dispatch-val)
    (catch e
      (get (. self methods) dispatch-val)
      (get (. self methods) :default))))


(defmacro defmulti (name dispatch-func)
  `(let* ((mm (MultiMethod))
          (func ~dispatch-func))
      ;; define the multimethod globally
      (defn ~name (& args)
          (apply (. mm (get-method (apply func args))) args))
      (. ~name set-method := (fn (self dispatch-val method)
                               (. mm (set-method dispatch-val method))))))

(defmacro defmethod (multifn dispatch-val & fn-tail)
  `(. ~multifn (set-method ~dispatch-val (fn ~@fn-tail))))



(defmacro wait-until (check & body)
  `(do (while (not ~check) (sleep 0))
      ~@body))

;; call the function 'pred' every i ms,
;; stopping when pred returns false/nil
(def (interval* i pred)
  (if (or (nil? i) (= i 0))
    ;; if there is no i interval, don't yield to
    ;; the scheduler with (sleep) and let the scheduler
    ;; preempt the fiber
    (go (while (pred)))
    ;; otherwise we need to yield to the scheduler
    ;; every time around
    (go (while (pred)
          (sleep i)))))

(defmacro interval (i & body)
  `(interval* ~i (fn () (do ~@body))))


(deftype chan
  (def has-value false)
  (def (new self)
    (. self has-value := false)
    (. self value := nil))
  ;; put an item in the channel
  (def (put self val)
    (wait-until (not self.has-value))
    (sleep)
    (. self has-value := true)
    (. self value := val))
  ;; take an item out of the channel
  (def (pop self)
    (wait-until self.has-value)
    (. self has-value := false)
    (. self value))

  (def (first self)
    (first (ChannelIterator self)))
  (def (rest self)
    (rest (ChannelIterator self))))




(def (locked? x)
  (. x (locked?)))

(def (lock! m) (. m (lock!)))

(def (unlock! m) (. m (unlock!)))



(import _mutex)
;; define an event-loop safe wrapper around a kernel mutex
(deftype Mutex
  (def (new self)
    (. self _mut := (_mutex.KernelMutex)))
  (def (locked? self)
    (locked? self._mut))
  (def (lock! self)
    (wait-until (not (locked? self._mut))
      (lock! self._mut)))
  (def (unlock! self)
      (unlock! self._mut)))




(def native/c++ "c++")
(def native/so-ext ".so")

(def (native/compile & args)
  (let [opts (apply dict args)
        name (:name opts)
        files (:files opts)
        extra-args (or (:args opts) [])]
    (os/shell (str native/c++
                  " -o " (str name native/so-ext)
                  " -lcedar "
                  " -shared -I/usr/local/include "
                  (if (not (= 0 (len extra-args)))
                    (join extra-args " ")
                    "")
                  " -fPIC -frtti -std=c++17 "
                  " -Wall -Wextra -fpic -O3 "
                  (join files " ")))))


