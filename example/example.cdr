(def range-step (fn (a b step)
                  (if (< a b) (cons a (range-step (+ a step) b step)))))


(def range (fn (a b)
             (if (< a b) (cons a (range-step (+ 1 a) b 1)))))

;; reduce the function f over xs starting at i
(def reduce (fn (f i xs)
              (if (nil? xs)
                  i
                  (reduce f (f i (first xs)) (rest xs)))))




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(class account
       (balance)
       ((withdraw (fn (c) (def balance (- balance c))))
        (deposit (fn (c) (def balance (+ balance c))))
        (get-balance (fn () balance))))

(def checking (account 30))
(checking.withdraw 10)
(checking.deposit 300)



((get checking 'deposit) 300)

(class person (name)
  ((speak (fn () (println name "says hi!")))))


(def guy (person "bob"))
(guy.speak)



(defmacro defn-memo (name args body))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn fib (n)
  (if (< n 2)
    n
    (+ (fib (- n 2)) (fib (- n 1)))))


(defn read-eval ()
  (do
    (print "* ")
    (eval (macroexpand (read)))))




;; (let ((v nil))
;;   (def v (read-eval))
;;   (if (not (= v :EOF))
;;     (do
;;       (println v)
;;       (recur nil))))


(defmacro lazy-seq
  (body)
  (list 'cedar/new-lazy-sequence (list 'fn () body)))


(defn inc (n) (+ n 1))
(defn dec (n) (- n 1))
