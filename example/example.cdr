; (print (set user 'name "hello"))
;; (set user.dog 'name "Grandmaster Flash")
;; (print user.first user.last "is the owner of the dog" user.dog.name)

; (print (get user 'foo nil))


(def fib-memo (dict))
(def fib-fast
  (fn (n)
    ((fn (m)
       (if m m
         (set fib-memo n
              (if (< n 2)
                n
                (+ (fib-fast (- n 1))
                   (fib-fast (- n 2))))))) (get fib-memo n nil))))

(def fib (fn (n)
           (if (< n 2)
             n
             (+ (fib (- n 2))
                (fib (- n 1))))))






(def range-step (fn (a b step)
                  (if (< a b) (cons a (range-step (+ a step) b step)))))


(def range (fn (a b)
             (if (< a b) (cons a (range-step (+ 1 a) b 1)))))



;; reduce the function f over xs starting at i
(def reduce (fn (f i xs)
              (if (nil? xs)
                  i
                  (reduce f (f i (car xs)) (cdr xs)))))

(def inf (fn (n)
           (progn
             (recur (+ n 1.0)))))



(class account
       (balance)
       ((withdraw (fn (c) (def balance (- balance c))))

        (deposit (fn (c) (def balance (+ balance c))))
        (get-balance (fn () balance))))

(def checking (account 30))
(checking.withdraw 10)
(checking.deposit 300)
(print (checking.get-balance))

(class person
  (name)
  ((speak (fn () (print name "says hi!")))))


(def guy (person "bob"))
(guy.speak)
