(import os)
(import bits)

(def (fact n)
  (cond (<= n 1) 1
        :else (* n (fact (dec n)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn ofib (n)
  (if (< n 2)
    n
    (+ (ofib (- n 2)) (ofib (- n 1)))))


(def (walk start)
  (lazily (cons start (walk (inc start)))))


(def (hexchar x)
  (get "0123456789ABCDEF" (bits.and x 0x0F)))

(def (trim-zeros s)
  (if (= (first s) "0")
    (trim-zeros (rest s))
    s))
(def (hex x)
  (let (s "" i 0)
    (while (< i 16)
      (def s (str (hexchar (bits.and x 0x0F)) s))
      (def x (bits.shift-right x 4))
      (def i (inc i)))
    (trim-zeros s)))


(def (memoize f)
  (let (mem {}
        not-found-sym (gensym))
    (fn (& args)
      (let (r (get mem args not-found-sym))
        (if (= r not-found-sym)
          (set mem args (apply f args))
          r)))))


(def (fib-iter max n i j)
  (if (= n max)
    j
    (recur max
           (inc n)
           j
           (+ i j))))


(def (fib max)
  (if (< max 2)
    max
    (fib-iter max 1 0 1)))




(let [x 0]
  (while false
    (inc= x)
    (println x)))


(defn brackets [n]
  (if (= 0 n) "println(\"sup\n\");"
        (str "{" (brackets (dec n)) "}")))


(import tcp)


(def server (tcp.Server (fn (handle)
                          (println handle))))


(. server (listen 8080 "0.0.0.0"))
