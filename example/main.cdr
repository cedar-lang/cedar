
(def range-step (fn (a b step)
                  (if (< a b) (cons a (range-step (+ a step) b step)))))

(def (range a b)
    (if (< a b) (cons a (range-step (+ 1 a) b 1))))

;; reduce the function f over xs starting at i
(def (reduce f i xs)
     (if (nil? xs)
         i
         (reduce f (f i (first xs)) (rest xs))))



(def (fact n)
  (cond (<= n 1) 1
        :else (* n (fact (dec n)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn fib (n)
  (if (< n 2)
    n
    (+ (fib (- n 2)) (fib (- n 1)))))




(defn read-eval ()
  (do
    (print "CEDAR> ")
    (eval (macroexpand (read)))))

;; (let ((v nil))
;;   (def v (catch (read-eval)
;;            e (do (println "unhandled exception:" e) nil)))
;;   (if (not (= v :EOF))
;;     (do
;;       (println v)
;;       (recur nil))))




(deftype lazy-seq
  ;; the function that will be called eventually
  (def func nil)
  ;; if the lazy sequence has been evaluated yet
  (def evaluated nil)
  ;; the value stored in the list. will be filled
  ;; when .seq is called
  (def value nil)
  ;; constructor. Takes the function that will be
  ;; evaluated on .seq
  (def (new self f)
      (setattr self func f))
  ;; implementations of first and rest
  (def (first self) (first* (. self (seq))))
  (def (rest self) (rest* (. self (seq))))
  ;; the seq function "steps" this lazy sequence.
  ;; this means it checks if it's been evaluated
  ;; yet, and if it needs to, evaluates the function
  ;; caching it's result and returning it. If it
  ;; has already been evaluated, there is no reason
  ;; in calling the function again and it returns
  ;; the value it had cached
  (def (seq self)
    (if (. self evaluated) (. self value)
      (do (setattr self evaluated t)
          (setattr self value ((. self func))))))
  ;; convert the lazy list into a string.
  ;; WARNING: this will consume the *entire*
  ;; list
  (def (str self)
    (str "(" (join self " ") ")")))

(defmacro lazily (& expr)
  `(lazy-seq (fn () (do ,@expr))))




(def (walk start)
  (lazily (cons start (walk (inc start)))))



(def (hexchar x)
  (get "0123456789ABCDEF" (bit-and x 0x0F)))

(def (trim-zeros s)
  (if (= (first s) "0")
    (trim-zeros (rest s))
    s))
(def (hex x)
  (let [s "" i 0]
    (while (< i 16)
      (def s (str (hexchar (bit-and x 0x0F)) s))
      (def x (bit-shift-right x 4))
      (def i (inc i)))
    (trim-zeros s)))

;; (when (number? x)
;;     (if (< 0 x) (def x (* x -1)))
;;     (cond (= 0 x) ""
;;           :else (str (hex (bit-shift-right-logic x 4))
;;                      (hexchar (bit-and 0x0F x))))))




(def (vmap func v)
  (do
    (when (not (vector? v)) (throw "vmap requires a vector"))
    (let [len (count v)
          i 0]
      (while (< i len)
        (def v (set v i (func (get v i))))
        (def i (inc i)))
      v)))




(def (vrange n)
  (let [i 0
        v []]
    (if (< i n)
      (recur (inc i) (cons i v))
      v)))

(def (memoize f)
  (let [mem {}
        not-found-sym (gensym)]
    (fn (& args)
      (let [r (get mem args not-found-sym)]
        (if (= r not-found-sym)
          (set mem args (apply f args))
          r)))))



(def (lazy-filter pred coll)
  (if (nil? coll) nil
    (let [f (first coll)
          r (rest coll)]
      (if (pred f)
        (lazily (cons f (lazy-filter pred r)))
        (lazy-filter pred r)))))

;;  primes = sieve [2..]
;; sieve (p:ps) = p : sieve [x | x <- ps, mod x p /= 0]

(def (prime-filter p)
  (fn (x) (not= (mod x p) 0)))

(def (sieve _ps)
  (let [p  (first _ps)
        ps (rest _ps)]
    (lazily (cons p (sieve (lazy-filter (prime-filter p) ps))))))



(def primes (sieve (walk 2)))

(def (apply-to f)
  (fn (args)
    (apply f args)))

(def (transpose s)
  (apply vector (map (fn (x) (apply vector x))
                     (apply zip s))))
(def (nested-for f x y)
  (map (fn (a)
         (map (fn (b)
                (f a b)) y)) x))

(def (matmul-1 a b)
  (nested-for (fn (x y)
                (reduce + 0 (map (apply-to *) (zip x y)))) ;; f
              a ;; x
              (transpose b))) ;; y

(def (matmul a b)
  (apply vector (map (apply-to vector) (matmul-1 a b))))





(def A [[1 2 3]
        [4 5 6]
        [7 8 9]])

(def B [[1 0 0]
        [0 1 0]
        [0 0 1]])


(defmacro test (t & body)
  `(let [] ,t ,@body))




(deftype Base
  (def (str self)
    (String "BASE"))
  (def (repr self)
    (String "BASE" (gets foo nil))))

(deftype Foo [Base]
  (def (new self v)
    (setattr self foo v)))

