(use os)

(use bits)

(def (fact n)
  (cond (<= n 1) 1
        :else (* n (fact (dec n)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn ofib (n)
  (if (< n 2)
    n
    (+ (*func* (- n 2)) (*func* (- n 1)))))



(def (walk start)
  (lazily (cons start (walk (inc start)))))

(def (hexchar x)
  (get "0123456789ABCDEF" (bits.and x 0x0F)))

(def (trim-zeros s)
  (if (= (first s) "0")
    (trim-zeros (rest s))
    s))


(def (hex x)
  (let (s "" i 0)
    (while (< i 16)
      (def s (str (hexchar (bits.and x 0x0F)) s))
      (def x (bits.shift-right x 4))
      (def i (inc i)))
    (or (trim-zeros s) "0")))

(def (memoize f)
  (let (mem {}
        not-found-sym (gensym))
    (fn (& args)
      (let (r (get mem args not-found-sym))
        (if (= r not-found-sym)
          (set mem args (apply f args))
          r)))))

(def (fib-iter max n i j)
  (if (= n max)
    j
    (recur max
           (inc n)
           j
           (+ i j))))

(def (fib max)
  (if (< max 2)
    max
    (fib-iter max 1 0 1)))

(let [x 0]
  (while false
    (inc= x)
    (println x)))

(defn brackets [n]
  (if (= 0 n) "println(\"sup\n\");"
        (str "{" (brackets (dec n)) "}")))

(defmacro go-forever (& body)
  `(go (while true (do ~@body))))

(def (lazy-filter pred coll)
  (if (nil? coll) nil
    (let (f (first coll)
          r (rest coll))
      (if (pred f)
        (lazily (cons f (lazy-filter pred r)))
        (lazy-filter pred r)))))


(def (prime-filter p)
  (fn (x) (not= (mod x p) 0)))

(def (sieve _ps)
  (let (p  (first _ps)
        ps (rest _ps))
    (lazily (cons p (sieve (lazy-filter (prime-filter p) ps))))))

(def primes (sieve (walk 2)))

(defn go-each [xs f]
  (if (nil? xs)
    nil
    (do (let [elm (first xs)] (go (f elm)))
        (recur (rest xs) f))))

(defn square [x] (* x x))

(defn foo [n] (os.timeout n (fn () (printf "timeout: %s\n", n))))


(defmacro foo [x] x)

(use linear for *)


(defmacro loopinc [sym]
  `(do (def ~sym 0)
       (go (while true (def ~sym (+ ~sym 1))))))

;; (loopinc x)
;; (loopinc y)
;; (loopinc z)
;; (while true (println x y z))
